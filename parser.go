// Code generated by goyacc -o parser.go parser.go.y. DO NOT EDIT.

//line parser.go.y:2
package gojq

import __yyfmt__ "fmt"

//line parser.go.y:2

// Parse parses a query.
func Parse(src string) (*Query, error) {
	l := newLexer(src)
	if yyParse(l) > 0 {
		return nil, l.err
	}
	return l.result, nil
}

// Just like Parse, but panics if an error occurs.
func MustParse(src string) (*Query) {
	query, err := Parse(src)
	if err != nil {
		panic(err.Error())
	}
	return query
}

func reverseFuncDef(xs []*FuncDef) []*FuncDef {
	for i, j := 0, len(xs)-1; i < j; i, j = i+1, j-1 {
		xs[i], xs[j] = xs[j], xs[i]
	}
	return xs
}

func prependFuncDef(xs []*FuncDef, x *FuncDef) []*FuncDef {
	xs = append(xs, nil)
	copy(xs[1:], xs)
	xs[0] = x
	return xs
}

//line parser.go.y:28
type yySymType struct {
	yys      int
	value    interface{}
	token    string
	operator Operator
}

const tokAltOp = 57346
const tokUpdateOp = 57347
const tokDestAltOp = 57348
const tokOrOp = 57349
const tokAndOp = 57350
const tokCompareOp = 57351
const tokModule = 57352
const tokImport = 57353
const tokInclude = 57354
const tokDef = 57355
const tokAs = 57356
const tokLabel = 57357
const tokBreak = 57358
const tokNull = 57359
const tokTrue = 57360
const tokFalse = 57361
const tokIdent = 57362
const tokVariable = 57363
const tokModuleIdent = 57364
const tokModuleVariable = 57365
const tokIndex = 57366
const tokNumber = 57367
const tokFormat = 57368
const tokInvalid = 57369
const tokString = 57370
const tokStringStart = 57371
const tokStringQuery = 57372
const tokStringEnd = 57373
const tokIf = 57374
const tokThen = 57375
const tokElif = 57376
const tokElse = 57377
const tokEnd = 57378
const tokTry = 57379
const tokCatch = 57380
const tokReduce = 57381
const tokForeach = 57382
const tokRecurse = 57383
const tokFuncDefPost = 57384
const tokTermPost = 57385
const tokEmptyCatch = 57386

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"tokAltOp",
	"tokUpdateOp",
	"tokDestAltOp",
	"tokOrOp",
	"tokAndOp",
	"tokCompareOp",
	"tokModule",
	"tokImport",
	"tokInclude",
	"tokDef",
	"tokAs",
	"tokLabel",
	"tokBreak",
	"tokNull",
	"tokTrue",
	"tokFalse",
	"tokIdent",
	"tokVariable",
	"tokModuleIdent",
	"tokModuleVariable",
	"tokIndex",
	"tokNumber",
	"tokFormat",
	"tokInvalid",
	"tokString",
	"tokStringStart",
	"tokStringQuery",
	"tokStringEnd",
	"tokIf",
	"tokThen",
	"tokElif",
	"tokElse",
	"tokEnd",
	"tokTry",
	"tokCatch",
	"tokReduce",
	"tokForeach",
	"tokRecurse",
	"tokFuncDefPost",
	"tokTermPost",
	"tokEmptyCatch",
	"'|'",
	"','",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'.'",
	"'?'",
	"'['",
	"';'",
	"':'",
	"'('",
	"')'",
	"']'",
	"'{'",
	"'}'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line parser.go.y:687

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 130,
	5, 0,
	-2, 32,
	-1, 133,
	9, 0,
	-2, 35,
	-1, 194,
	56, 114,
	-2, 54,
}

const yyPrivate = 57344

const yyLast = 1126

var yyAct = [...]int{
	86, 214, 174, 112, 12, 203, 9, 175, 111, 31,
	190, 6, 156, 140, 117, 47, 95, 97, 93, 94,
	89, 227, 49, 75, 76, 7, 77, 78, 79, 240,
	235, 103, 239, 106, 164, 123, 226, 119, 107, 108,
	105, 234, 102, 75, 76, 113, 77, 78, 79, 163,
	122, 104, 211, 75, 76, 210, 77, 78, 79, 158,
	159, 264, 259, 243, 72, 74, 80, 81, 82, 83,
	84, 229, 73, 127, 275, 128, 129, 130, 131, 132,
	133, 134, 135, 136, 137, 138, 80, 81, 82, 83,
	84, 228, 73, 147, 72, 74, 80, 81, 82, 83,
	84, 145, 73, 141, 278, 161, 246, 277, 157, 225,
	166, 165, 144, 126, 125, 167, 88, 42, 43, 245,
	124, 258, 224, 206, 179, 180, 181, 44, 183, 184,
	73, 242, 177, 154, 267, 178, 142, 186, 49, 173,
	256, 257, 143, 92, 91, 90, 92, 191, 100, 197,
	150, 99, 200, 192, 201, 202, 188, 42, 43, 207,
	88, 182, 120, 198, 199, 209, 219, 7, 216, 98,
	215, 215, 218, 213, 113, 101, 185, 75, 76, 155,
	77, 78, 79, 204, 205, 221, 222, 3, 91, 90,
	92, 179, 180, 181, 230, 28, 8, 232, 27, 177,
	223, 220, 178, 80, 81, 82, 83, 84, 85, 73,
	176, 157, 241, 46, 110, 149, 237, 152, 72, 74,
	80, 81, 82, 83, 84, 88, 73, 255, 182, 196,
	79, 191, 195, 236, 7, 253, 254, 192, 248, 247,
	160, 121, 249, 250, 96, 262, 260, 261, 215, 263,
	11, 189, 187, 91, 90, 92, 11, 268, 269, 139,
	270, 82, 83, 84, 208, 73, 272, 273, 80, 81,
	82, 83, 84, 10, 73, 279, 5, 4, 271, 280,
	51, 52, 2, 53, 54, 55, 56, 57, 58, 59,
	60, 61, 62, 115, 116, 170, 1, 171, 169, 0,
	0, 42, 43, 0, 0, 63, 64, 65, 66, 67,
	68, 69, 70, 71, 0, 0, 20, 0, 17, 37,
	24, 25, 26, 38, 40, 39, 41, 23, 29, 30,
	114, 42, 43, 0, 212, 15, 0, 0, 0, 0,
	16, 0, 13, 14, 22, 0, 0, 0, 0, 0,
	33, 34, 0, 0, 0, 21, 0, 36, 0, 148,
	32, 0, 146, 35, 51, 52, 0, 53, 54, 55,
	56, 57, 58, 59, 60, 61, 62, 115, 116, 0,
	0, 0, 0, 0, 0, 42, 43, 0, 0, 63,
	64, 65, 66, 67, 68, 69, 70, 71, 18, 19,
	20, 0, 17, 37, 24, 25, 26, 38, 40, 39,
	41, 23, 29, 30, 114, 42, 43, 0, 109, 15,
	0, 0, 0, 0, 16, 0, 13, 14, 22, 0,
	0, 0, 0, 0, 33, 34, 0, 0, 0, 21,
	0, 36, 0, 0, 32, 0, 20, 35, 17, 37,
	24, 25, 26, 38, 40, 39, 41, 23, 29, 30,
	0, 42, 43, 0, 0, 15, 0, 0, 0, 0,
	16, 0, 13, 14, 22, 0, 87, 0, 0, 0,
	33, 34, 0, 0, 0, 21, 88, 36, 0, 0,
	32, 0, 231, 35, 20, 0, 17, 37, 24, 25,
	26, 38, 40, 39, 41, 23, 29, 30, 0, 42,
	43, 0, 0, 15, 91, 90, 92, 0, 16, 0,
	13, 14, 22, 0, 0, 0, 0, 0, 33, 34,
	0, 0, 0, 21, 0, 36, 0, 0, 32, 0,
	118, 35, 20, 0, 17, 37, 24, 25, 26, 38,
	40, 39, 41, 23, 29, 30, 0, 42, 43, 0,
	0, 15, 0, 77, 78, 79, 16, 0, 13, 14,
	22, 0, 0, 0, 0, 0, 33, 34, 0, 0,
	0, 21, 0, 36, 0, 0, 32, 51, 52, 35,
	53, 54, 55, 56, 57, 58, 59, 60, 61, 62,
	48, 0, 0, 80, 81, 82, 83, 84, 50, 73,
	0, 0, 63, 64, 65, 66, 67, 68, 69, 70,
	71, 51, 52, 0, 53, 54, 55, 56, 57, 58,
	59, 60, 61, 62, 48, 0, 0, 0, 0, 0,
	0, 172, 50, 0, 0, 0, 63, 64, 65, 66,
	67, 68, 69, 70, 71, 51, 52, 0, 53, 54,
	55, 56, 57, 58, 59, 60, 61, 62, 115, 194,
	78, 79, 0, 0, 0, 45, 42, 43, 0, 0,
	63, 64, 65, 66, 67, 68, 69, 70, 71, 37,
	24, 25, 26, 38, 40, 39, 41, 23, 29, 30,
	0, 42, 43, 75, 76, 193, 77, 78, 79, 80,
	81, 82, 83, 84, 22, 73, 0, 0, 0, 0,
	33, 34, 0, 0, 0, 21, 0, 36, 0, 0,
	32, 75, 76, 35, 77, 78, 79, 0, 0, 0,
	0, 0, 0, 0, 72, 74, 80, 81, 82, 83,
	84, 0, 73, 0, 0, 0, 75, 76, 252, 77,
	78, 79, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 72, 74, 80, 81, 82, 83, 84, 0,
	73, 0, 0, 0, 75, 76, 233, 77, 78, 79,
	0, 0, 0, 0, 0, 0, 0, 72, 74, 80,
	81, 82, 83, 84, 0, 73, 0, 0, 0, 75,
	76, 168, 77, 78, 79, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 72, 74, 80, 81, 82,
	83, 84, 0, 73, 0, 0, 75, 76, 281, 77,
	78, 79, 0, 0, 0, 0, 0, 0, 0, 0,
	72, 74, 80, 81, 82, 83, 84, 0, 73, 0,
	0, 75, 76, 276, 77, 78, 79, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 72, 74, 80,
	81, 82, 83, 84, 0, 73, 0, 0, 75, 76,
	251, 77, 78, 79, 0, 0, 0, 0, 0, 0,
	0, 0, 72, 74, 80, 81, 82, 83, 84, 0,
	73, 0, 0, 75, 76, 244, 77, 78, 79, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 72,
	74, 80, 81, 82, 83, 84, 0, 73, 0, 0,
	75, 76, 217, 77, 78, 79, 0, 0, 0, 0,
	0, 0, 0, 0, 72, 74, 80, 81, 82, 83,
	84, 0, 73, 0, 0, 75, 76, 162, 77, 78,
	79, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 72, 74, 80, 81, 82, 83, 84, 0, 73,
	0, 266, 75, 76, 0, 77, 78, 79, 0, 0,
	0, 0, 0, 0, 0, 0, 72, 74, 80, 81,
	82, 83, 84, 0, 73, 0, 265, 75, 76, 0,
	77, 78, 79, 0, 0, 0, 75, 76, 0, 77,
	78, 79, 0, 72, 74, 80, 81, 82, 83, 84,
	0, 73, 0, 238, 75, 76, 274, 77, 78, 79,
	0, 0, 0, 0, 0, 151, 0, 0, 72, 74,
	80, 81, 82, 83, 84, 0, 73, 72, 74, 80,
	81, 82, 83, 84, 0, 73, 75, 76, 153, 77,
	78, 79, 0, 0, 0, 72, 74, 80, 81, 82,
	83, 84, 0, 73, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 72, 74, 80,
	81, 82, 83, 84, 0, 73,
}

var yyPact = [...]int{
	177, -1000, -1000, -35, -1000, 387, 72, 614, -1000, 1072,
	-1000, 529, 462, 673, 673, 529, 529, 148, 123, 120,
	155, 89, -1000, -1000, -1000, -1000, -1000, -6, -1000, -1000,
	129, -1000, 529, 673, 673, 357, 481, 141, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -11, -1000, 64, 58,
	57, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 529, -1000, 529, 529, 529, 529, 529, 529,
	529, 529, 529, 529, 529, -1000, 1072, 82, -1000, -1000,
	-1000, 89, 303, 201, 136, 1022, 529, 1040, 88, 165,
	-35, 3, -1000, -1000, 529, -1000, 909, 92, 92, -1000,
	-12, -1000, 55, 54, 529, -1000, -1000, -1000, -1000, 752,
	-1000, 267, -1000, 580, 174, 174, 174, 1072, 39, 39,
	556, 662, 221, 156, 212, 212, 77, 77, 77, 131,
	-1000, -1000, 82, 648, -1000, -1000, -1000, 173, 529, 82,
	82, 529, -1000, 529, 529, 163, 68, -1000, 529, 163,
	-3, 1072, -1000, -1000, 273, 673, 673, 884, -1000, -1000,
	-1000, 529, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 107, -1000, -1000, 529, 82, 63, -1000, -25,
	-1000, 35, 15, 529, -1000, -1000, 433, 727, -16, -27,
	1072, -1000, 1072, -35, -1000, -1000, -1000, 988, -26, -1000,
	-1000, 529, -1000, -1000, 86, 92, 86, 7, 857, -1000,
	60, -1000, 1072, -1000, -1000, 82, -1000, 648, 82, 82,
	832, -1000, 699, -1000, 529, 529, 106, 66, -1000, 6,
	163, 1072, 673, 673, -1000, -1000, 174, -1000, -1000, -1000,
	-1000, 5, -1000, 961, 936, 98, 529, 529, -1000, 529,
	-1000, 92, 86, -1000, 82, 529, 529, -1000, 1013, 1072,
	19, -1000, 805, 49, 529, -1000, -1000, -1000, 529, 1072,
	780, -1000,
}

var yyPgo = [...]int{
	0, 296, 282, 277, 276, 273, 12, 196, 244, 264,
	0, 259, 13, 252, 251, 10, 4, 9, 241, 20,
	240, 233, 227, 217, 214, 8, 1, 2, 7, 213,
	15, 210, 201, 5, 198, 195, 14, 3,
}

var yyR1 = [...]int{
	0, 1, 2, 2, 3, 3, 4, 4, 5, 5,
	6, 6, 7, 7, 8, 8, 9, 9, 33, 33,
	10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
	10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
	10, 10, 11, 11, 12, 12, 12, 13, 13, 14,
	14, 15, 15, 15, 15, 16, 16, 16, 16, 16,
	16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
	16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
	16, 16, 16, 16, 17, 17, 18, 18, 18, 34,
	34, 35, 35, 19, 19, 19, 19, 19, 20, 20,
	21, 21, 22, 22, 23, 23, 24, 24, 25, 25,
	25, 25, 25, 37, 37, 37, 26, 26, 27, 27,
	27, 27, 27, 27, 27, 28, 28, 28, 29, 29,
	30, 30, 30, 31, 31, 32, 32, 36, 36, 36,
	36, 36, 36, 36, 36, 36, 36, 36, 36, 36,
	36, 36, 36, 36, 36, 36, 36, 36,
}

var yyR2 = [...]int{
	0, 2, 0, 3, 2, 2, 0, 2, 6, 4,
	0, 1, 0, 2, 5, 8, 1, 3, 1, 1,
	2, 3, 5, 9, 9, 11, 7, 3, 4, 2,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 1, 1, 3, 1, 3, 3, 1, 3, 1,
	3, 3, 3, 5, 1, 1, 1, 1, 2, 2,
	1, 1, 1, 1, 4, 1, 1, 1, 2, 1,
	3, 2, 2, 2, 3, 4, 2, 3, 2, 2,
	2, 2, 3, 3, 1, 3, 0, 2, 4, 1,
	1, 1, 1, 2, 3, 4, 4, 5, 1, 3,
	0, 5, 0, 2, 0, 2, 1, 3, 3, 3,
	5, 1, 1, 1, 1, 1, 1, 3, 1, 1,
	1, 1, 1, 1, 1, 2, 3, 4, 1, 3,
	3, 3, 3, 2, 3, 1, 3, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
}

var yyChk = [...]int{
	-1000, -1, -2, 10, -3, -4, -28, 60, -7, -10,
	-5, -8, -16, 39, 40, 32, 37, 15, 11, 12,
	13, 52, 41, 24, 17, 18, 19, -34, -35, 25,
	26, -17, 57, 47, 48, 60, 54, 16, 20, 22,
	21, 23, 28, 29, 55, 61, -29, -30, 20, -36,
	28, 7, 8, 10, 11, 12, 13, 14, 15, 16,
	17, 18, 19, 32, 33, 34, 35, 36, 37, 38,
	39, 40, 45, 53, 46, 4, 5, 7, 8, 9,
	47, 48, 49, 50, 51, -7, -10, 14, 24, -19,
	53, 52, 54, -16, -16, -10, -8, -10, 21, 28,
	28, 20, -19, -17, 57, -17, -10, -16, -16, 61,
	-24, -25, -37, -17, 57, 20, 21, -36, 59, -10,
	21, -18, 61, 46, 56, 56, 56, -10, -10, -10,
	-10, -10, -10, -10, -10, -10, -10, -10, -10, -11,
	-12, 21, 54, 60, -19, -17, 59, -10, 56, 14,
	14, 33, -23, 38, 45, 14, -6, -28, 56, 57,
	-20, -10, 58, 61, 46, 56, 56, -10, 59, 31,
	28, 30, 61, -30, -27, -28, -31, 25, 28, 17,
	18, 19, 54, -27, -27, 45, 6, -13, -12, -14,
	-15, -37, -17, 57, 21, 59, 56, -10, -12, -12,
	-10, -10, -10, -33, 20, 21, 55, -10, -9, -33,
	58, 55, 61, -25, -26, -16, -26, 58, -10, 59,
	-32, -27, -10, -12, 59, 46, 61, 46, 56, 56,
	-10, 59, -10, 59, 57, 57, -21, -6, 55, 58,
	55, -10, 45, 56, 58, 59, 46, -12, -15, -12,
	-12, 58, 59, -10, -10, -22, 34, 35, 55, 56,
	-33, -16, -26, -27, 56, 55, 55, 36, -10, -10,
	-10, -12, -10, -10, 33, 55, 58, 58, 55, -10,
	-10, 58,
}

var yyDef = [...]int{
	2, -2, 6, 0, 1, 12, 0, 0, 4, 5,
	7, 12, 41, 0, 0, 0, 0, 0, 0, 0,
	0, 55, 56, 57, 60, 61, 62, 63, 65, 66,
	67, 69, 0, 0, 0, 0, 0, 0, 89, 90,
	91, 92, 84, 86, 3, 125, 0, 128, 0, 0,
	0, 137, 138, 139, 140, 141, 142, 143, 144, 145,
	146, 147, 148, 149, 150, 151, 152, 153, 154, 155,
	156, 157, 0, 29, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 13, 20, 0, 79, 80,
	81, 0, 0, 0, 0, 0, 0, 104, 0, 0,
	10, 0, 58, 59, 0, 68, 0, 71, 72, 73,
	0, 106, 111, 112, 0, 113, 114, 115, 76, 0,
	78, 0, 126, 0, 0, 0, 0, 21, 30, 31,
	-2, 33, 34, -2, 36, 37, 38, 39, 40, 0,
	42, 44, 0, 0, 82, 83, 93, 0, 0, 0,
	0, 0, 27, 0, 0, 0, 0, 11, 0, 0,
	0, 98, 70, 74, 0, 0, 0, 0, 77, 85,
	87, 0, 127, 129, 130, 118, 119, 120, 121, 122,
	123, 124, 0, 131, 132, 0, 0, 0, 47, 0,
	49, 0, 0, 0, -2, 94, 0, 0, 0, 0,
	100, 105, 28, 10, 18, 19, 9, 0, 0, 16,
	64, 0, 75, 107, 108, 116, 109, 0, 0, 133,
	0, 135, 22, 43, 45, 0, 46, 0, 0, 0,
	0, 95, 0, 96, 0, 0, 102, 0, 14, 0,
	0, 99, 0, 0, 88, 134, 0, 48, 50, 51,
	52, 0, 97, 0, 0, 0, 0, 0, 8, 0,
	17, 117, 110, 136, 0, 0, 0, 26, 0, 103,
	0, 53, 0, 0, 0, 15, 23, 24, 0, 101,
	0, 25,
}

var yyTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 51, 3, 3,
	57, 58, 49, 47, 46, 48, 52, 50, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 56, 55,
	3, 3, 3, 53, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 54, 3, 59, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 60, 45, 61,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44,
}

var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:67
		{
			if yyDollar[1].value != nil {
				yyDollar[2].value.(*Query).Meta = yyDollar[1].value.(*ConstObject)
			}
			yylex.(*lexer).result = yyDollar[2].value.(*Query)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:74
		{
			yyVAL.value = nil
		}
	case 3:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:78
		{
			yyVAL.value = yyDollar[2].value
		}
	case 4:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:84
		{
			yyVAL.value = &Query{Imports: yyDollar[1].value.([]*Import), FuncDefs: reverseFuncDef(yyDollar[2].value.([]*FuncDef)), Term: &Term{Type: TermTypeIdentity}}
		}
	case 5:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:88
		{
			if yyDollar[1].value != nil {
				yyDollar[2].value.(*Query).Imports = yyDollar[1].value.([]*Import)
			}
			yyVAL.value = yyDollar[2].value
		}
	case 6:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:95
		{
			yyVAL.value = []*Import(nil)
		}
	case 7:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:99
		{
			yyVAL.value = append(yyDollar[1].value.([]*Import), yyDollar[2].value.(*Import))
		}
	case 8:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:105
		{
			yyVAL.value = &Import{ImportPath: yyDollar[2].token, ImportAlias: yyDollar[4].token, Meta: yyDollar[5].value.(*ConstObject)}
		}
	case 9:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:109
		{
			yyVAL.value = &Import{IncludePath: yyDollar[2].token, Meta: yyDollar[3].value.(*ConstObject)}
		}
	case 10:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:115
		{
			yyVAL.value = (*ConstObject)(nil)
		}
	case 11:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:118
		{
		}
	case 12:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:122
		{
			yyVAL.value = []*FuncDef(nil)
		}
	case 13:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:126
		{
			yyVAL.value = append(yyDollar[2].value.([]*FuncDef), yyDollar[1].value.(*FuncDef))
		}
	case 14:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:132
		{
			yyVAL.value = &FuncDef{Name: yyDollar[2].token, Body: yyDollar[4].value.(*Query)}
		}
	case 15:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:136
		{
			yyVAL.value = &FuncDef{yyDollar[2].token, yyDollar[4].value.([]string), yyDollar[7].value.(*Query)}
		}
	case 16:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:142
		{
			yyVAL.value = []string{yyDollar[1].token}
		}
	case 17:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:146
		{
			yyVAL.value = append(yyDollar[1].value.([]string), yyDollar[3].token)
		}
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:151
		{
		}
	case 19:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:152
		{
		}
	case 20:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:156
		{
			yyDollar[2].value.(*Query).FuncDefs = prependFuncDef(yyDollar[2].value.(*Query).FuncDefs, yyDollar[1].value.(*FuncDef))
			yyVAL.value = yyDollar[2].value
		}
	case 21:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:161
		{
			yyVAL.value = &Query{Left: yyDollar[1].value.(*Query), Op: OpPipe, Right: yyDollar[3].value.(*Query)}
		}
	case 22:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:165
		{
			yyDollar[1].value.(*Term).SuffixList = append(yyDollar[1].value.(*Term).SuffixList, &Suffix{Bind: &Bind{yyDollar[3].value.([]*Pattern), yyDollar[5].value.(*Query)}})
			yyVAL.value = &Query{Term: yyDollar[1].value.(*Term)}
		}
	case 23:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.go.y:170
		{
			yyVAL.value = &Query{Term: &Term{Type: TermTypeReduce, Reduce: &Reduce{yyDollar[2].value.(*Term), yyDollar[4].value.(*Pattern), yyDollar[6].value.(*Query), yyDollar[8].value.(*Query)}}}
		}
	case 24:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.go.y:174
		{
			yyVAL.value = &Query{Term: &Term{Type: TermTypeForeach, Foreach: &Foreach{yyDollar[2].value.(*Term), yyDollar[4].value.(*Pattern), yyDollar[6].value.(*Query), yyDollar[8].value.(*Query), nil}}}
		}
	case 25:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser.go.y:178
		{
			yyVAL.value = &Query{Term: &Term{Type: TermTypeForeach, Foreach: &Foreach{yyDollar[2].value.(*Term), yyDollar[4].value.(*Pattern), yyDollar[6].value.(*Query), yyDollar[8].value.(*Query), yyDollar[10].value.(*Query)}}}
		}
	case 26:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:182
		{
			yyVAL.value = &Query{Term: &Term{Type: TermTypeIf, If: &If{yyDollar[2].value.(*Query), yyDollar[4].value.(*Query), yyDollar[5].value.([]*IfElif), yyDollar[6].value.(*Query)}}}
		}
	case 27:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:186
		{
			yyVAL.value = &Query{Term: &Term{Type: TermTypeTry, Try: &Try{yyDollar[2].value.(*Query), yyDollar[3].value.(*Query)}}}
		}
	case 28:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:190
		{
			yyVAL.value = &Query{Term: &Term{Type: TermTypeLabel, Label: &Label{yyDollar[2].token, yyDollar[4].value.(*Query)}}}
		}
	case 29:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:194
		{
			if t := yyDollar[1].value.(*Query).Term; t != nil {
				t.SuffixList = append(t.SuffixList, &Suffix{Optional: true})
			} else {
				yyVAL.value = &Query{Term: &Term{Type: TermTypeQuery, Query: yyDollar[1].value.(*Query), SuffixList: []*Suffix{{Optional: true}}}}
			}
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:202
		{
			yyVAL.value = &Query{Left: yyDollar[1].value.(*Query), Op: OpComma, Right: yyDollar[3].value.(*Query)}
		}
	case 31:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:206
		{
			yyVAL.value = &Query{Left: yyDollar[1].value.(*Query), Op: yyDollar[2].operator, Right: yyDollar[3].value.(*Query)}
		}
	case 32:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:210
		{
			yyVAL.value = &Query{Left: yyDollar[1].value.(*Query), Op: yyDollar[2].operator, Right: yyDollar[3].value.(*Query)}
		}
	case 33:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:214
		{
			yyVAL.value = &Query{Left: yyDollar[1].value.(*Query), Op: OpOr, Right: yyDollar[3].value.(*Query)}
		}
	case 34:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:218
		{
			yyVAL.value = &Query{Left: yyDollar[1].value.(*Query), Op: OpAnd, Right: yyDollar[3].value.(*Query)}
		}
	case 35:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:222
		{
			yyVAL.value = &Query{Left: yyDollar[1].value.(*Query), Op: yyDollar[2].operator, Right: yyDollar[3].value.(*Query)}
		}
	case 36:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:226
		{
			yyVAL.value = &Query{Left: yyDollar[1].value.(*Query), Op: OpAdd, Right: yyDollar[3].value.(*Query)}
		}
	case 37:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:230
		{
			yyVAL.value = &Query{Left: yyDollar[1].value.(*Query), Op: OpSub, Right: yyDollar[3].value.(*Query)}
		}
	case 38:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:234
		{
			yyVAL.value = &Query{Left: yyDollar[1].value.(*Query), Op: OpMul, Right: yyDollar[3].value.(*Query)}
		}
	case 39:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:238
		{
			yyVAL.value = &Query{Left: yyDollar[1].value.(*Query), Op: OpDiv, Right: yyDollar[3].value.(*Query)}
		}
	case 40:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:242
		{
			yyVAL.value = &Query{Left: yyDollar[1].value.(*Query), Op: OpMod, Right: yyDollar[3].value.(*Query)}
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:246
		{
			yyVAL.value = &Query{Term: yyDollar[1].value.(*Term)}
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:252
		{
			yyVAL.value = []*Pattern{yyDollar[1].value.(*Pattern)}
		}
	case 43:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:256
		{
			yyVAL.value = append(yyDollar[1].value.([]*Pattern), yyDollar[3].value.(*Pattern))
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:262
		{
			yyVAL.value = &Pattern{Name: yyDollar[1].token}
		}
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:266
		{
			yyVAL.value = &Pattern{Array: yyDollar[2].value.([]*Pattern)}
		}
	case 46:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:270
		{
			yyVAL.value = &Pattern{Object: yyDollar[2].value.([]*PatternObject)}
		}
	case 47:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:276
		{
			yyVAL.value = []*Pattern{yyDollar[1].value.(*Pattern)}
		}
	case 48:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:280
		{
			yyVAL.value = append(yyDollar[1].value.([]*Pattern), yyDollar[3].value.(*Pattern))
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:286
		{
			yyVAL.value = []*PatternObject{yyDollar[1].value.(*PatternObject)}
		}
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:290
		{
			yyVAL.value = append(yyDollar[1].value.([]*PatternObject), yyDollar[3].value.(*PatternObject))
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:296
		{
			yyVAL.value = &PatternObject{Key: yyDollar[1].token, Val: yyDollar[3].value.(*Pattern)}
		}
	case 52:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:300
		{
			yyVAL.value = &PatternObject{KeyString: yyDollar[1].value.(*String), Val: yyDollar[3].value.(*Pattern)}
		}
	case 53:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:304
		{
			yyVAL.value = &PatternObject{KeyQuery: yyDollar[2].value.(*Query), Val: yyDollar[5].value.(*Pattern)}
		}
	case 54:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:308
		{
			yyVAL.value = &PatternObject{KeyOnly: yyDollar[1].token}
		}
	case 55:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:314
		{
			yyVAL.value = &Term{Type: TermTypeIdentity}
		}
	case 56:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:318
		{
			yyVAL.value = &Term{Type: TermTypeRecurse}
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:322
		{
			yyVAL.value = &Term{Type: TermTypeIndex, Index: &Index{Name: yyDollar[1].token}}
		}
	case 58:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:326
		{
			if yyDollar[2].value.(*Suffix).Iter {
				yyVAL.value = &Term{Type: TermTypeIdentity, SuffixList: []*Suffix{yyDollar[2].value.(*Suffix)}}
			} else {
				yyVAL.value = &Term{Type: TermTypeIndex, Index: yyDollar[2].value.(*Suffix).Index}
			}
		}
	case 59:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:334
		{
			yyVAL.value = &Term{Type: TermTypeIndex, Index: &Index{Str: yyDollar[2].value.(*String)}}
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:338
		{
			yyVAL.value = &Term{Type: TermTypeNull}
		}
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:342
		{
			yyVAL.value = &Term{Type: TermTypeTrue}
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:346
		{
			yyVAL.value = &Term{Type: TermTypeFalse}
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:350
		{
			yyVAL.value = &Term{Type: TermTypeFunc, Func: &Func{Name: yyDollar[1].token}}
		}
	case 64:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:354
		{
			yyVAL.value = &Term{Type: TermTypeFunc, Func: &Func{Name: yyDollar[1].token, Args: yyDollar[3].value.([]*Query)}}
		}
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:358
		{
			yyVAL.value = &Term{Type: TermTypeFunc, Func: &Func{Name: yyDollar[1].token}}
		}
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:362
		{
			yyVAL.value = &Term{Type: TermTypeNumber, Number: yyDollar[1].token}
		}
	case 67:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:366
		{
			yyVAL.value = &Term{Type: TermTypeFormat, Format: yyDollar[1].token}
		}
	case 68:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:370
		{
			yyVAL.value = &Term{Type: TermTypeFormat, Format: yyDollar[1].token, Str: yyDollar[2].value.(*String)}
		}
	case 69:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:374
		{
			yyVAL.value = &Term{Type: TermTypeString, Str: yyDollar[1].value.(*String)}
		}
	case 70:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:378
		{
			yyVAL.value = &Term{Type: TermTypeQuery, Query: yyDollar[2].value.(*Query)}
		}
	case 71:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:382
		{
			yyVAL.value = &Term{Type: TermTypeUnary, Unary: &Unary{OpAdd, yyDollar[2].value.(*Term)}}
		}
	case 72:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:386
		{
			yyVAL.value = &Term{Type: TermTypeUnary, Unary: &Unary{OpSub, yyDollar[2].value.(*Term)}}
		}
	case 73:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:390
		{
			yyVAL.value = &Term{Type: TermTypeObject, Object: &Object{}}
		}
	case 74:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:394
		{
			yyVAL.value = &Term{Type: TermTypeObject, Object: &Object{yyDollar[2].value.([]*ObjectKeyVal)}}
		}
	case 75:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:398
		{
			yyVAL.value = &Term{Type: TermTypeObject, Object: &Object{yyDollar[2].value.([]*ObjectKeyVal)}}
		}
	case 76:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:402
		{
			yyVAL.value = &Term{Type: TermTypeArray, Array: &Array{}}
		}
	case 77:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:406
		{
			yyVAL.value = &Term{Type: TermTypeArray, Array: &Array{yyDollar[2].value.(*Query)}}
		}
	case 78:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:410
		{
			yyVAL.value = &Term{Type: TermTypeBreak, Break: yyDollar[2].token}
		}
	case 79:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:414
		{
			yyDollar[1].value.(*Term).SuffixList = append(yyDollar[1].value.(*Term).SuffixList, &Suffix{Index: &Index{Name: yyDollar[2].token}})
		}
	case 80:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:418
		{
			yyDollar[1].value.(*Term).SuffixList = append(yyDollar[1].value.(*Term).SuffixList, yyDollar[2].value.(*Suffix))
		}
	case 81:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:422
		{
			yyDollar[1].value.(*Term).SuffixList = append(yyDollar[1].value.(*Term).SuffixList, &Suffix{Optional: true})
		}
	case 82:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:426
		{
			yyDollar[1].value.(*Term).SuffixList = append(yyDollar[1].value.(*Term).SuffixList, yyDollar[3].value.(*Suffix))
		}
	case 83:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:430
		{
			yyDollar[1].value.(*Term).SuffixList = append(yyDollar[1].value.(*Term).SuffixList, &Suffix{Index: &Index{Str: yyDollar[3].value.(*String)}})
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:436
		{
			yyVAL.value = &String{Str: yyDollar[1].token}
		}
	case 85:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:440
		{
			yyVAL.value = &String{Queries: yyDollar[2].value.([]*Query)}
		}
	case 86:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:446
		{
			yyVAL.value = []*Query{}
		}
	case 87:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:450
		{
			yyVAL.value = append(yyDollar[1].value.([]*Query), &Query{Term: &Term{Type: TermTypeString, Str: &String{Str: yyDollar[2].token}}})
		}
	case 88:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:454
		{
			yylex.(*lexer).inString = true
			yyVAL.value = append(yyDollar[1].value.([]*Query), &Query{Term: &Term{Type: TermTypeQuery, Query: yyDollar[3].value.(*Query)}})
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:460
		{
		}
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:461
		{
		}
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:464
		{
		}
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:465
		{
		}
	case 93:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:469
		{
			yyVAL.value = &Suffix{Iter: true}
		}
	case 94:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:473
		{
			yyVAL.value = &Suffix{Index: &Index{Start: yyDollar[2].value.(*Query)}}
		}
	case 95:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:477
		{
			yyVAL.value = &Suffix{Index: &Index{Start: yyDollar[2].value.(*Query), IsSlice: true}}
		}
	case 96:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:481
		{
			yyVAL.value = &Suffix{Index: &Index{End: yyDollar[3].value.(*Query), IsSlice: true}}
		}
	case 97:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:485
		{
			yyVAL.value = &Suffix{Index: &Index{Start: yyDollar[2].value.(*Query), End: yyDollar[4].value.(*Query), IsSlice: true}}
		}
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:491
		{
			yyVAL.value = []*Query{yyDollar[1].value.(*Query)}
		}
	case 99:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:495
		{
			yyVAL.value = append(yyDollar[1].value.([]*Query), yyDollar[3].value.(*Query))
		}
	case 100:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:501
		{
			yyVAL.value = []*IfElif(nil)
		}
	case 101:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:505
		{
			yyVAL.value = append(yyDollar[1].value.([]*IfElif), &IfElif{yyDollar[3].value.(*Query), yyDollar[5].value.(*Query)})
		}
	case 102:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:511
		{
			yyVAL.value = (*Query)(nil)
		}
	case 103:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:515
		{
			yyVAL.value = yyDollar[2].value
		}
	case 104:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:521
		{
			yyVAL.value = (*Query)(nil)
		}
	case 105:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:525
		{
			yyVAL.value = yyDollar[2].value
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:531
		{
			yyVAL.value = []*ObjectKeyVal{yyDollar[1].value.(*ObjectKeyVal)}
		}
	case 107:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:535
		{
			yyVAL.value = append(yyDollar[1].value.([]*ObjectKeyVal), yyDollar[3].value.(*ObjectKeyVal))
		}
	case 108:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:541
		{
			yyVAL.value = &ObjectKeyVal{Key: yyDollar[1].token, Val: yyDollar[3].value.(*ObjectVal)}
		}
	case 109:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:545
		{
			yyVAL.value = &ObjectKeyVal{KeyString: yyDollar[1].value.(*String), Val: yyDollar[3].value.(*ObjectVal)}
		}
	case 110:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:549
		{
			yyVAL.value = &ObjectKeyVal{KeyQuery: yyDollar[2].value.(*Query), Val: yyDollar[5].value.(*ObjectVal)}
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:553
		{
			yyVAL.value = &ObjectKeyVal{KeyOnly: yyDollar[1].token}
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:557
		{
			yyVAL.value = &ObjectKeyVal{KeyOnlyString: yyDollar[1].value.(*String)}
		}
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:562
		{
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:563
		{
		}
	case 115:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:564
		{
		}
	case 116:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:568
		{
			yyVAL.value = &ObjectVal{[]*Query{{Term: yyDollar[1].value.(*Term)}}}
		}
	case 117:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:572
		{
			yyVAL.value = &ObjectVal{append(yyDollar[1].value.(*ObjectVal).Queries, &Query{Term: yyDollar[3].value.(*Term)})}
		}
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:578
		{
			yyVAL.value = &ConstTerm{Object: yyDollar[1].value.(*ConstObject)}
		}
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:582
		{
			yyVAL.value = &ConstTerm{Array: yyDollar[1].value.(*ConstArray)}
		}
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:586
		{
			yyVAL.value = &ConstTerm{Number: yyDollar[1].token}
		}
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:590
		{
			yyVAL.value = &ConstTerm{Str: yyDollar[1].token}
		}
	case 122:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:594
		{
			yyVAL.value = &ConstTerm{Null: true}
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:598
		{
			yyVAL.value = &ConstTerm{True: true}
		}
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:602
		{
			yyVAL.value = &ConstTerm{False: true}
		}
	case 125:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:608
		{
			yyVAL.value = &ConstObject{}
		}
	case 126:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:612
		{
			yyVAL.value = &ConstObject{yyDollar[2].value.([]*ConstObjectKeyVal)}
		}
	case 127:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:616
		{
			yyVAL.value = &ConstObject{yyDollar[2].value.([]*ConstObjectKeyVal)}
		}
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:622
		{
			yyVAL.value = []*ConstObjectKeyVal{yyDollar[1].value.(*ConstObjectKeyVal)}
		}
	case 129:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:626
		{
			yyVAL.value = append(yyDollar[1].value.([]*ConstObjectKeyVal), yyDollar[3].value.(*ConstObjectKeyVal))
		}
	case 130:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:632
		{
			yyVAL.value = &ConstObjectKeyVal{Key: yyDollar[1].token, Val: yyDollar[3].value.(*ConstTerm)}
		}
	case 131:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:636
		{
			yyVAL.value = &ConstObjectKeyVal{Key: yyDollar[1].token, Val: yyDollar[3].value.(*ConstTerm)}
		}
	case 132:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:640
		{
			yyVAL.value = &ConstObjectKeyVal{KeyString: yyDollar[1].token, Val: yyDollar[3].value.(*ConstTerm)}
		}
	case 133:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:646
		{
			yyVAL.value = &ConstArray{}
		}
	case 134:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:650
		{
			yyVAL.value = &ConstArray{yyDollar[2].value.([]*ConstTerm)}
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:656
		{
			yyVAL.value = []*ConstTerm{yyDollar[1].value.(*ConstTerm)}
		}
	case 136:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:660
		{
			yyVAL.value = append(yyDollar[1].value.([]*ConstTerm), yyDollar[3].value.(*ConstTerm))
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:665
		{
		}
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:666
		{
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:667
		{
		}
	case 140:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:668
		{
		}
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:669
		{
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:670
		{
		}
	case 143:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:671
		{
		}
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:672
		{
		}
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:673
		{
		}
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:674
		{
		}
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:675
		{
		}
	case 148:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:676
		{
		}
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:677
		{
		}
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:678
		{
		}
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:679
		{
		}
	case 152:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:680
		{
		}
	case 153:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:681
		{
		}
	case 154:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:682
		{
		}
	case 155:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:683
		{
		}
	case 156:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:684
		{
		}
	case 157:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:685
		{
		}
	}
	goto yystack /* stack new state and value */
}
